-- ======================================== ROLES ========================================
CREATE TABLE IF NOT EXISTS CHL_OWNER.ROLES (
  ID   SMALLINT PRIMARY KEY   NOT NULL,
  NAME VARCHAR(30)            NOT NULL
);
-- DROP TABLE CHL_OWNER.ROLES;

CREATE SEQUENCE IF NOT EXISTS CHL_OWNER.SEQ_ROLES
  INCREMENT BY 1
  MINVALUE 50
  MAXVALUE 100
  START WITH 50;
--DROP SEQUENCE CHL_OWNER.SEQ_ROLES;

-- ======================================== USERS ========================================

CREATE TABLE IF NOT EXISTS CHL_OWNER.USERS (
  ID       BIGINT PRIMARY KEY   NOT NULL,
  EMAIL    VARCHAR(100)         NOT NULL,
  PASSWORD VARCHAR(100)         NOT NULL,
  NAME     VARCHAR(100)         NOT NULL,
  ENABLED  BOOLEAN              NOT NULL,
  I_ROLES  BIGINT               NOT NULL,
  CONSTRAINT FK_USERS_ROLES FOREIGN KEY (I_ROLES) REFERENCES CHL_OWNER.ROLES (ID)
);
-- DROP TABLE CHL_OWNER.USERS;

CREATE SEQUENCE IF NOT EXISTS CHL_OWNER.SEQ_USERS
  INCREMENT BY 1
  MINVALUE 10
  MAXVALUE 2147483647
  START WITH 10;
--DROP SEQUENCE CHL_OWNER.SEQ_USERS;

CREATE INDEX IF NOT EXISTS IDX_USERS_ROLES
  ON CHL_OWNER.USERS (I_ROLES);
-- DROP INDEX IDX_USERS_ROLES;

-- ======================================== PROCESSOS ========================================

CREATE TABLE IF NOT EXISTS CHL_OWNER.PROCESSOS (
  ID          BIGINT PRIMARY KEY   NOT NULL,
  NAME        VARCHAR(100)         NOT NULL,
  DESCRIPTION VARCHAR(1000)        NOT NULL
);
-- DROP TABLE CHL_OWNER.PROCESSOS;

CREATE SEQUENCE IF NOT EXISTS CHL_OWNER.SEQ_PROCESSOS
  INCREMENT BY 1
  MINVALUE 1
  MAXVALUE 1000000
  START WITH 1;
--DROP SEQUENCE CHL_OWNER.SEQ_PROCESSOS;

-- ======================================== PARECERES ========================================

CREATE TABLE IF NOT EXISTS CHL_OWNER.PARECERES (
  ID          BIGINT PRIMARY KEY   NOT NULL,
  I_USERS     BIGINT               NOT NULL,
  I_PROCESSOS BIGINT               NOT NULL,
  PARECER     VARCHAR(1000),
  CONSTRAINT FK_PARECERES_USERS FOREIGN KEY (I_USERS) REFERENCES CHL_OWNER.USERS (ID),
  CONSTRAINT FK_PARECERES_PROCESSOS FOREIGN KEY (I_PROCESSOS) REFERENCES CHL_OWNER.PROCESSOS (ID)
);
-- DROP TABLE CHL_OWNER.PARECERES;

CREATE INDEX IF NOT EXISTS IDX_PARECERES_USERS
  ON CHL_OWNER.PARECERES (I_USERS);
-- DROP INDEX IDX_PARECERES_USERS;

CREATE INDEX IF NOT EXISTS IDX_PARECERES_PROCESSOS
  ON CHL_OWNER.PARECERES (I_PROCESSOS);
-- DROP INDEX IDX_PARECERES_PROCESSOS;

CREATE SEQUENCE IF NOT EXISTS CHL_OWNER.SEQ_PARECERES
  INCREMENT BY 1
  MINVALUE 1
  MAXVALUE 1000000
  START WITH 1;
--DROP SEQUENCE CHL_OWNER.SEQ_PARECERES;

-- ======================================== OAUTH ========================================

CREATE TABLE IF NOT EXISTS AUTH_OWNER.OAUTH_CLIENT_DETAILS (
  CLIENT_ID               VARCHAR(255) PRIMARY KEY,
  RESOURCE_IDS            VARCHAR(255),
  CLIENT_SECRET           VARCHAR(255),
  SCOPE                   VARCHAR(255),
  AUTHORIZED_GRANT_TYPES  VARCHAR(255),
  WEB_SERVER_REDIRECT_URI VARCHAR(255),
  AUTHORITIES             VARCHAR(255),
  ACCESS_TOKEN_VALIDITY   INTEGER,
  REFRESH_TOKEN_VALIDITY  INTEGER,
  ADDITIONAL_INFORMATION  VARCHAR(4096),
  AUTOAPPROVE             VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS AUTH_OWNER.OAUTH_CLIENT_TOKEN (
  TOKEN_ID          VARCHAR(256),
  TOKEN             BYTEA,
  AUTHENTICATION_ID VARCHAR(256),
  USER_NAME         VARCHAR(256),
  CLIENT_ID         VARCHAR(256)
);


CREATE TABLE IF NOT EXISTS AUTH_OWNER.OAUTH_ACCESS_TOKEN (
  TOKEN_ID          VARCHAR(256),
  TOKEN             BYTEA,
  AUTHENTICATION_ID VARCHAR(256),
  USER_NAME         VARCHAR(256),
  CLIENT_ID         VARCHAR(256),
  AUTHENTICATION    BYTEA,
  REFRESH_TOKEN     VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS AUTH_OWNER.OAUTH_REFRESH_TOKEN (
  TOKEN_ID       VARCHAR(256),
  TOKEN          BYTEA,
  AUTHENTICATION BYTEA
);

CREATE TABLE IF NOT EXISTS AUTH_OWNER.OAUTH_CODE (
  CODE           VARCHAR(256),
  AUTHENTICATION BYTEA
);

CREATE TABLE IF NOT EXISTS AUTH_OWNER.OAUTH_APPROVALS (
  USERID         VARCHAR(256),
  CLIENTID       VARCHAR(256),
  SCOPE          VARCHAR(256),
  STATUS         VARCHAR(10),
  EXPIRESAT      TIMESTAMP,
  LASTMODIFIEDAT TIMESTAMP
);
